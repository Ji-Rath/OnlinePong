<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init variables
acceptor = tcp_listen(6730);
if(socket_has_error(acceptor)) {
    obj_error_box.textbox = ("Unable to start server: "+socket_error(acceptor));
    obj_error_box.error = true
    room_goto(rm_menu);
    instance_destroy();
}

opponentSocket = -1;
frame = 0;
global.ready = false
global.points = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy sockets
socket_destroy(acceptor);
socket_destroy(opponentSocket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sending information to client
if global.ready = true
{
    // Send the current state to the client
    // In a game with more players you wouldn't send all the state
    // to all players every frame - it takes too much bandwidth.
    write_ubyte(opponentSocket, 7);
    write_ubyte(opponentSocket, PADDLES_UPDATE);
    write_ushort(opponentSocket, obj_leftpaddle.pressed_up);
    write_ushort(opponentSocket, obj_leftpaddle.pressed_down);
    write_ushort(opponentSocket, obj_leftpaddle.y);
    

    
    write_ubyte(opponentSocket, 9);
    write_ubyte(opponentSocket, BALL_UPDATE);
    write_ushort(opponentSocket, obj_ball.x);
    write_ushort(opponentSocket, obj_ball.y);
    write_short(opponentSocket, obj_ball.hspeed*256);
    write_short(opponentSocket, obj_ball.vspeed*256);
    
}
    write_ubyte(opponentSocket, 5);
    write_ubyte(opponentSocket, GAME_PROP);
    write_ushort(opponentSocket, global.points);
    write_ushort(opponentSocket, global.ready);    
    
    socket_send(opponentSocket);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recieving information from the client
if global.ready = true
{
// Handle input from the client
// This is just a single unsigned short which tells the position of his paddle.
// We don't want to lag behind if we receive more than one in each frame, so
// we'll just process as many messages as there are available.
while(tcp_receive(opponentSocket, 6)) {
    with(obj_rightpaddle) {
        pressed_up = read_short(other.opponentSocket);
        pressed_down = read_short(other.opponentSocket);
        y = read_short(other.opponentSocket);
    }
}
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Alarm[1]
if alarm[1] &lt; 0
{
alarm[1] = 1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Error check and Movement
if(opponentSocket &lt; 0) {
    // The game hasn't started yet
    exit;
}

if(socket_has_error(opponentSocket)) {
    obj_error_box.error = true
    obj_error_box.textbox = ("Lost connection to the client: "+socket_error(opponentSocket));
    room_goto(rm_menu);
    instance_destroy();
}

if alarm[0] &lt; 0
{
alarm[0] = 1
}

// As the server, we move the left paddle
with(obj_leftpaddle) {
    if keyboard_check(ord("W"))
    {
        pressed_up = true
    }
    else
    {
        pressed_up = false
    }
    if keyboard_check(ord("S"))
    {
        pressed_down = true
    }
    else
    {
        pressed_down = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If host is ready
if global.ready = true &amp;&amp; room = rm_waitroom
{
    room_goto(rm_multiplayer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw text while in waitroom
if room = rm_waitroom
{
if(opponentSocket &lt; 0) {
    opponentSocket = socket_accept(acceptor);
}
    if(opponentSocket &gt; 0) {
    socket_sendbuffer_limit(opponentSocket, 65536);
    draw_set_halign(fa_center);
    draw_set_font(fnt_main);
    draw_set_color(c_white);
    draw_text(room_width/2, room_height/2, "Found opponent! Ready up to begin!");
    gj_trophy_add("5037")
    if(global.ready = false)
    {
        if instance_number(obj_button_readyup) = 0
        {
            instance_create(room_width/2,room_height/2+120,obj_button_readyup)
        }
    }
    if instance_number(obj_loading) = 0
    {
    instance_create(room_width/2, room_height/2 + 40, obj_loading)
    }
}
else
{

    draw_set_halign(fa_center);
    draw_set_font(fnt_main);
    draw_set_color(c_white);
    draw_text(room_width/2, room_height/2, "Waiting for opponent...");
    if instance_number(obj_loading) = 0
    {
    instance_create(room_width/2, room_height/2 + 40, obj_loading)
    }
    if instance_number(obj_button_maxpoints) = 0
    {
    instance_create(room_width/2, room_height/2 + 80, obj_button_maxpoints)
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
