<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var serverHost;
serverHost = get_string("Please enter the server's IP address or hostname", "127.0.0.1");

serverSocket = tcp_connect(serverHost, 6730);
socket_sendbuffer_limit(serverSocket, 65536);

nextByteIsHeader = true;
expectedBytes = 1;

room_goto(rm_multiplayer);

global.ready = false
global.points = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If Game has started
//if(socket_connecting(serverSocket) = false &amp;&amp;
//socket_has_error(serverSocket) = false)
if room = rm_multiplayer
{
while(tcp_receive(serverSocket, expectedBytes)) {
    if(nextByteIsHeader) {
        expectedBytes = read_ubyte(serverSocket);
        nextByteIsHeader = false;
    } else {
        var messageType;
        messageType = read_ubyte(serverSocket);
        switch(messageType) {
        case PADDLES_UPDATE:
            obj_leftpaddle.pressed_up = read_ushort(serverSocket);
            obj_leftpaddle.pressed_down = read_ushort(serverSocket);
            obj_leftpaddle.y = read_ushort(serverSocket);
            break;
            
        case GAME_PROP:
            global.points = read_ushort(serverSocket);
            global.ready = read_ushort(serverSocket);
            break;
            
        case BALL_UPDATE:
            obj_ball.x = read_ushort(serverSocket);
            obj_ball.y = read_ushort(serverSocket);
            
            var newHspeed, newVspeed;
            newHspeed = read_short(serverSocket)/256;
            newVspeed = read_short(serverSocket)/256;
            
            // Check if we missed a bump (speed in any direction was inverted)
            if(newHspeed*obj_ball.hspeed &lt; 0 or newVspeed*obj_ball.vspeed &lt; 0) {
                sound_play(BumpSnd);
            }
            
            obj_ball.hspeed = newHspeed;
            obj_ball.vspeed = newVspeed;
            break;
            
        case PLAYER_SCORE:
            doPlayerScore(read_ubyte(serverSocket));
            break;
            
        default:
            // Just ignore unknown messages
        }
        
        nextByteIsHeader = true;
        expectedBytes = 1;
    }
}
// Now we send our position to the server, so that it can set our paddle position

write_short(serverSocket, obj_rightpaddle.pressed_up);
write_short(serverSocket, obj_rightpaddle.pressed_down);
write_short(serverSocket, obj_rightpaddle.y);
socket_send(serverSocket);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Here we process messages from the server.
 * See the game constants for the message type definitions.
 * 
 * The protocol is relatively simple: Every message is preceded by a "header" 
 * consisting of one byte for the message body length. This is followed by
 * another byte for the message type. The rest of the message depends on the message type.
 */
 
if(socket_has_error(serverSocket)) {
    if global.ready = false
    {
        gj_trophy_add("43965")
    }
    room_goto(rm_menu);
    obj_error_box.error = true
    obj_error_box.textbox = ("The connection to the server was lost:" + socket_error(serverSocket));
    instance_destroy()
}


if alarm[1] &lt; 0
{
    alarm[1] = 2
}


with(obj_rightpaddle)
{
    if keyboard_check(ord("W"))
    {
        pressed_up = true
    }
    else
    {
        pressed_up = false
    }
    if keyboard_check(ord("S"))
    {
        pressed_down = true
    }
    else
    {
        pressed_down = false
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.ready = false
{

if (socket_has_error(serverSocket) = false
 &amp;&amp; socket_connecting(serverSocket) = false)
{
    draw_set_color(c_black)
    draw_rectangle(0,0,room_width,room_height,false)
    draw_set_color(c_white)
    draw_set_halign(fa_center)
    draw_set_font(fnt_main)
    if instance_number(obj_loading) = 0
    {
    instance_create(room_width/2, room_height/2 + 40, obj_loading)
    }
    draw_text(room_width/2,room_height/2,"Found Match! Waiting for Host to start Game...")
}
else
{
    draw_set_font(fnt_main)
    draw_set_color(c_black)
    draw_rectangle(0,0,room_width,room_height,false)
    draw_set_color(c_white)
    draw_text(room_width/2, room_height/2, "Attempting to connect to opponent...");
    if instance_number(obj_loading) = 0
    {
    instance_create(room_width/2, room_height/2 + 40, obj_loading)
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
