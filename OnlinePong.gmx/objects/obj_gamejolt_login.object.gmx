<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    user_txt = "";
    token_txt = "";
    focus = 0;
    focus_should_refresh = 0;
    log = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Check focus and recieve keyboard input
    if focus == 0
    {
        if focus_should_refresh = 0 { keyboard_string = user_txt; focus_should_refresh = 1 }
        user_txt = string_copy( string_replace_all( keyboard_string, "#", "\#"), 1, 30);
        if string_length(user_txt) &gt;= 30 keyboard_string = user_txt;
    }
    else
    {
        if focus_should_refresh = 1 { keyboard_string = token_txt; focus_should_refresh = 0 }
        token_txt = string_copy( string_replace_all( keyboard_string, "#", "\#"), 1, 30);
        if string_length(token_txt) &gt;= 30 keyboard_string = token_txt;
    }
    
    // Changing Focus
    h = 45;              // textbox height
    w = 600;             // textbox width
    cx = room_width/2 + 40;   // center x
    cy = room_height/2 + 40;  // center y
    
    _x = cx -(w/2);
    _y = 175;
    
    mouse_on_user_input = check_click( _x, _y, w, h);
    mouse_on_token_input = check_click( _x, _y + 75, w, h);
    if  (mouse_on_user_input or mouse_on_token_input)
    {
        window_set_cursor(cr_handpoint);
        if mouse_check_button_pressed(mb_left)
        {
            if mouse_on_user_input
                { focus_should_refresh = 0; focus = 0; }
            else
                { focus_should_refresh = 1; focus = 1; }
        }
    }
    else
        window_set_cursor(cr_default);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Drawing Back Rectangles
    draw_set_alpha(0.65);
    
    h = 45;              // textbox height
    w = 600;             // textbox width
    cx = room_width/2;   // center x
    cy = room_height/2;  // center y
    
    _x = cx -(w/2);
    _y = 175;
    
    if focus == 0 draw_set_color(c_gray) else draw_set_color(make_color_rgb(65,65,65));
    draw_rectangle( _x, _y, _x + w, _y + h, 0);
    
    if focus == 1 draw_set_color(c_gray) else draw_set_color(make_color_rgb(35,35,35));
    draw_rectangle( _x, _y + 75, _x + w, _y + h + 75, 0);
    
    draw_set_alpha(1);
    
    // Drawing Input Text
    draw_set_font(fnt_main);
    draw_set_halign(1);
    draw_set_valign(1);
    draw_set_color(c_white);
    
    if user_txt != ""
    {
        draw_set_color(c_white);
        draw_text( _x + (w/2), _y + (h/2), user_txt);
    }
    else
    {
        draw_set_color(c_gray);
        draw_text( _x + (w/2), _y + (h/2), "username");
    }
    
    if token_txt != ""
    {
        draw_set_color(c_white);
        draw_text( _x + (w/2), _y + (h/2) + 75, token_txt);
    }
    else
    {
        draw_set_color(c_gray);
        draw_text( _x + (w/2), _y + (h/2) + 75, "token");
    }
    
    // Draw Hint
    draw_set_font(fnt_main);
    draw_set_halign(1);
    draw_set_valign(1);
    draw_set_color(c_white);
    draw_text( cx, _y + 75 + h + 25, log);
    
    if !instance_exists(obj_button_loginconfirm)
    {
        instance_create(room_width/2,room_height/2 + 40,obj_button_loginconfirm)
    }

draw_set_valign(0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
