<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>acceptor = tcp_listen(6730);
if(socket_has_error(acceptor)) {
    show_message("Unable to start server: "+socket_error(acceptor));
    room_goto(StartRoom);
    instance_destroy();
}

opponentSocket = -1;
frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_destroy(acceptor);
socket_destroy(opponentSocket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(opponentSocket &lt; 0) {
    opponentSocket = socket_accept(acceptor);
    if(opponentSocket &gt; 0) {
        socket_sendbuffer_limit(opponentSocket, 65536);
        room_goto(PongRoom);
    }
} else {
    // Send the current state to the client
    // In a game with more players you wouldn't send all the state
    // to all players every frame - it takes too much bandwidth.
    
    write_ubyte(opponentSocket, 5);
    write_ubyte(opponentSocket, PADDLES_UPDATE);
    write_ushort(opponentSocket, LeftPaddle.y);
    write_ushort(opponentSocket, RightPaddle.y);
    
    write_ubyte(opponentSocket, 9);
    write_ubyte(opponentSocket, BALL_UPDATE);
    write_ushort(opponentSocket, Ball.x);
    write_ushort(opponentSocket, Ball.y);
    write_short(opponentSocket, Ball.hspeed*256);
    write_short(opponentSocket, Ball.vspeed*256);
    
    socket_send(opponentSocket);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(opponentSocket &lt; 0) {
    // The game hasn't started yet
    exit;
}

if(socket_has_error(opponentSocket)) {
    show_message("Lost connection to the client: "+socket_error(opponentSocket));
    game_end();
}

// As the server, we move the left paddle
with(LeftPaddle) {
    y = mouse_y;
    clipPaddlePosition();
}

// Handle input from the client
// This is just a single unsigned short which tells the position of his paddle.
// We don't want to lag behind if we receive more than one in each frame, so
// we'll just process as many messages as there are available.
while(tcp_receive(opponentSocket, 2)) {
    with(RightPaddle) {
        y = read_short(other.opponentSocket);
        clipPaddlePosition();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(opponentSocket &lt; 0 &amp;&amp; room = rm_waitroom) {
    draw_set_halign(fa_center);
    draw_set_font(fnt_main)
    draw_set_color(c_white);
    draw_text(room_width/2, room_height/2, "Waiting for connection...");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
